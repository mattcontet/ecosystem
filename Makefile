VERT="\\033[1;32m"
NORMAL="\\033[0;39m"
ROUGE="\\033[1;31m"
ROSE="\\033[1;35m"
BLEU="\\033[1;34m"
BLANC="\\033[0;02m"
BLANCLAIR="\\033[1;08m"
JAUNE="\\033[1;33m"
CYAN="\\033[1;36m"

export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33'
export CLICOLOR=1

DOCKER          = docker
DOCKER_COMPOSE  = docker-compose

## =============================================================================
##                             __   __
##                            __ \ / __
##                           /  \ | /  \
##                               \|/
##                          _,.---v---._
##                 /\__/\  /            \
##                 \_  _/ /              \
##                   \ \_|           @ __|
##                    \                \_
##                     \     ,__/       /
##                   ~~~`~~~~~~~~~~~~~~/~~~~
##                                       __
##      ___  _________  _______  _______/ /____  ____ ___
##     / _ \/ ___/ __ \/ ___/ / / / ___/ __/ _ \/ __ `__ \
##    /  __/ /__/ /_/ (__  ) /_/ (__  ) /_/  __/ / / / / /
##    \___/\___/\____/____/\__, /____/\__/\___/_/ /_/ /_/
##                        /____/
##
## =============================================================================

##
## =============================================================================
##   Configuration
## =============================================================================
##

aliases: ## Configure aliases
	@if [[ ! -f php/bash_aliases ]]; then \
		cp php/bash_aliases.dist php/bash_aliases; \
		echo $(JAUNE)WARNING: The default configuration has been applied because the "bash_aliases" file was not configured.$(NORMAL); \
	else \
        echo $(VERT)bash_aliases file already configured$(NORMAL); \
    fi

cron: ## Configure the crontab file
	@if [[ ! -f php/custom_crontab ]]; then \
		cp php/custom_crontab.dist php/custom_crontab; \
		echo $(JAUNE)WARNING: The default configuration has been applied because the "custom_crontab" file was not configured.$(NORMAL); \
	else \
		echo $(VERT)custom_crontab file already configured$(NORMAL); \
	fi

ini: ## Configure the custom.ini file
	@if [[ ! -f php/conf.d/custom.ini ]]; then \
		cp php/conf.d/custom.ini.dist php/conf.d/custom.ini; \
		echo $(JAUNE)WARNING: The default configuration has been applied because the "custom.ini" file was not configured.$(NORMAL); \
	else \
		echo $(VERT)custom.ini file already configured$(NORMAL); \
	fi

env: ## Configure the env file
	@if [[ ! -f .env ]]; then \
		cp .env.dist .env; \
		echo $(JAUNE)WARNING: The default configuration has been applied because the ".env" file was not configured.$(NORMAL); \
	else \
		echo $(VERT).env file already configured$(NORMAL); \
	fi

setup: aliases cron ini env ## Setup the environment

build: ## Build the environment
	make setup
	$(DOCKER_COMPOSE) build --pull

start: ## Start the environment
	$(DOCKER_COMPOSE) up -d --remove-orphans
	make ps

stop: ## Stop the environment
	$(DOCKER_COMPOSE) stop

down: ## Stop and remove containers, networks, images, and volumes
	$(DOCKER_COMPOSE) down

reup: down start ## Reup the environment

restart: stop start ## Restart the environment

install: build start ## Install the environment

uninstall: ## Uninstall the environment
	$(DOCKER_COMPOSE) kill
	$(DOCKER_COMPOSE) down --volumes --remove-orphans

.PHONY: build setup start stop restart install uninstall

##
## =============================================================================
##   Usage
## =============================================================================
##

cache: ## Flush everything stored into the "redis" container
	$(DOCKER_COMPOSE) exec -T redis sh -c "redis-cli FLUSHALL"

logs: ## Follow logs generated by all containers
	$(DOCKER_COMPOSE) logs -f --tail=0

logs-full: ## Follow logs generated by all containers from the containers creation
	$(DOCKER_COMPOSE) logs -f

go: ## Open a terminal in the selected container
	make ps
	@read -p "Enter container name: " container; \
	$(DOCKER_COMPOSE) exec $$container sh -c "/bin/bash"

gomysql: ## Open a terminal in the "mysql" container
	$(DOCKER_COMPOSE) exec mysql sh -c "/bin/bash"

gopgsql: ## Open a terminal in the "pgsql" container
	$(DOCKER_COMPOSE) exec pgsql sh -c "/bin/bash"

goweb: ## Open a terminal in the "php" container
	$(DOCKER_COMPOSE) exec php sh -c "/bin/bash"

gonginx: ## Open a terminal in the "nginx" container
	$(DOCKER_COMPOSE) exec nginx sh -c "/bin/bash"

goredis: ## Open a terminal in the "redis" container
	$(DOCKER_COMPOSE) exec redis sh -c "/bin/bash"

ps: ## List all containers managed by the environment
	$(DOCKER_COMPOSE) ps

stats: ## Print real-time statistics about containers ressources usage
	$(DOCKER) stats $(docker ps --format={{.Names}})

ssh: ## Copy all SSH keys from the host to the "php" container
	$(DOCKER_COMPOSE) exec -T php sh -c "mkdir -p /root/.ssh"
	$(DOCKER) cp ~/.ssh $(shell docker-compose ps -q php):/root/.ssh
	$(DOCKER_COMPOSE) exec -T php sh -c "echo 'eval \$$(ssh-agent) && ssh-add' >> /root/.bashrc"

.PHONY: cache logs logs-full goapache gomysql gophp gonginx goredis ps stats ssh

.DEFAULT_GOAL := help
help:
	@grep -E '(^[a-zA-Z_-]+:.*?##.*$$)|(^##)' $(MAKEFILE_LIST) \
		| awk 'BEGIN {FS = ":.*?## "}; {printf "\033[32m%-30s\033[0m %s\n", $$1, $$2}' \
		| sed -e 's/\[32m##/[33m/'
.PHONY: help
